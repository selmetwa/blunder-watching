{"version":3,"file":"hot/scripts/content.ea96123eef3e26707229.hot-update.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AChDA","sources":["webpack://blunder-watching/./scripts/utils/pieces/rook.ts","webpack://blunder-watching/webpack/runtime/getFullHash"],"sourcesContent":["function getSquarePosition(board, square) {\n  for (let row = 0; row < board.length; row++) {\n    for (let col = 0; col < board[row].length; col++) {\n      if (board[row][col] === square) {\n        return {\n          row,\n          col\n        };\n      }\n    }\n  }\n  throw new Error('Square not found on the board.');\n}\nexport const rook = (board, rook, targetSquare) => {\n  const {\n    row: rookRow,\n    col: rookCol\n  } = getSquarePosition(board, rook);\n  const {\n    row: targetRow,\n    col: targetCol\n  } = getSquarePosition(board, targetSquare);\n  if (rookRow === targetRow && rookCol === targetCol) {\n    return null; // Rook cannot move to its own square\n  }\n\n  // Check if target square is in the rook's line of fire (same row or column)\n  if (rookRow === targetRow || rookCol === targetCol) {\n    // Determine the direction of movement (vertical or horizontal)\n    const isVertical = rookRow !== targetRow;\n\n    // Determine the direction of movement (+1 or -1)\n    const direction = isVertical ? targetRow > rookRow ? 1 : -1 : targetCol > rookCol ? 1 : -1;\n\n    // Iterate along the path from the rook to the target square\n    for (let i = 1; isVertical ? rookRow + i * direction !== targetRow : rookCol + i * direction !== targetCol; i++) {\n      const currentRow = isVertical ? rookRow + i * direction : rookRow;\n      const currentCol = isVertical ? rookCol : rookCol + i * direction;\n      const currentSquare = board[currentRow][currentCol];\n\n      // Check for obstacles (non-empty squares) along the path\n      if (currentSquare?.color !== null) {\n        return null; // Obstacle detected\n      }\n    }\n    return rook; // No obstacles, target square is reachable\n  }\n  return null; // Target square is not reachable by rook's movement\n};","__webpack_require__.h = () => (\"af195c61fde9a53e2b5e\")"],"names":[],"sourceRoot":""}