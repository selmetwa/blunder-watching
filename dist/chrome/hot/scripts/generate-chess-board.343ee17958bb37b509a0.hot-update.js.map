{"version":3,"file":"hot/scripts/generate-chess-board.343ee17958bb37b509a0.hot-update.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC3FA","sources":["webpack://blunder-watching/./scripts/utils/generate-chess-board.ts","webpack://blunder-watching/webpack/runtime/getFullHash"],"sourcesContent":["import { allSquares, playingAs, fileNumberToLetterMap } from \"../constants\";\nimport { generateAttackers } from \"./generate-attackers\";\nexport const generateChessboard = pieceNodes => {\n  const pieces = Array.from(pieceNodes);\n  const occupiedSquares = pieces.map(piece => {\n    const classList = piece.classList;\n    const pieceTypeInfo = classList[1];\n    const pieceSquareInfo = classList[2].split('-')[1];\n    const pieceColor = pieceTypeInfo?.charAt(0);\n    const pieceType = pieceTypeInfo?.charAt(1);\n    const file = Number(pieceSquareInfo?.charAt(0));\n    const rank = pieceSquareInfo?.charAt(1);\n    const square = `${fileNumberToLetterMap[file]}${rank}`;\n    return {\n      color: pieceColor,\n      type: pieceType,\n      square: square,\n      attackers: [],\n      defenders: []\n    };\n  });\n  const occupiedSquareCoordinates = occupiedSquares.map(square => square.square);\n  const emptySquares = allSquares.filter(square => !occupiedSquareCoordinates.includes(square)).map(square => ({\n    color: null,\n    type: 'e',\n    square,\n    attackers: [],\n    defenders: []\n  }));\n  const allSquaresWithPieces = [...occupiedSquares, ...emptySquares];\n  const chessboard = Array.from({\n    length: 8\n  }, () => Array(8).fill(null));\n  allSquaresWithPieces.forEach(piece => {\n    const {\n      color,\n      type,\n      square,\n      attackers,\n      defenders\n    } = piece;\n    const [file, rank] = square.split(''); // Reverse the square string to match array indexing\n    const fileIndex = file.charCodeAt(0) - 97; // Convert file to array index (a=0, b=1, ..., h=7)\n    const rankIndex = parseInt(rank) - 1; // Convert rank to array index (1=0, 2=1, ..., 8=7)\n\n    if (chessboard?.[rankIndex]?.[fileIndex] !== undefined) {\n      chessboard[rankIndex][fileIndex] = {\n        color,\n        type,\n        square,\n        attackers,\n        defenders\n      };\n    }\n  });\n  for (let r = 0; r < 8; r++) {\n    for (let f = 0; f < 8; f++) {\n      const square = chessboard[r][f];\n      const {\n        attackers: res\n      } = generateAttackers(chessboard, square);\n      if (chessboard?.[r]?.[f] !== undefined) {\n        if (square.color === 'w') {\n          const defenders = res.filter(attacker => attacker.color === 'w');\n          const attackers = res.filter(attacker => attacker.color === 'b');\n          chessboard[r][f].attackers = attackers;\n          chessboard[r][f].defenders = defenders;\n        }\n        if (square.color === 'b') {\n          const defenders = res.filter(attacker => attacker.color === 'b');\n          const attackers = res.filter(attacker => attacker.color === 'w');\n          chessboard[r][f].attackers = attackers;\n          chessboard[r][f].defenders = defenders;\n        }\n        if (square.color === null) {\n          if (playingAs === 'w') {\n            const defenders = res.filter(attacker => attacker.color === 'w');\n            const attackers = res.filter(attacker => attacker.color === 'b');\n            chessboard[r][f].attackers = attackers;\n            chessboard[r][f].defenders = defenders;\n          } else {\n            const defenders = res.filter(attacker => attacker.color === 'b');\n            const attackers = res.filter(attacker => attacker.color === 'w');\n            chessboard[r][f].attackers = attackers;\n            chessboard[r][f].defenders = defenders;\n          }\n        }\n      }\n    }\n  }\n  return chessboard;\n};","__webpack_require__.h = () => (\"85d99fe579aff5f8faa7\")"],"names":[],"sourceRoot":""}