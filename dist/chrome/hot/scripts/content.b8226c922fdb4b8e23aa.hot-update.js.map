{"version":3,"file":"hot/scripts/content.b8226c922fdb4b8e23aa.hot-update.js","mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;AC1FA","sources":["webpack://blunder-watching/./scripts/content.ts","webpack://blunder-watching/webpack/runtime/getFullHash"],"sourcesContent":["if (import.meta.webpackHot) {\n  import.meta.webpackHot.accept();\n}\n;\nconsole.log(\"content script loaded!\");\nimport { generateChessboard } from './utils/generate-chess-board';\nconst board = document.querySelector('wc-chess-board');\nlet classString = '';\nfunction findStringDifference(str1, str2) {\n  let diff = '';\n  for (let i = 0; i < Math.min(str1.length, str2.length); i++) {\n    if (str1[i] !== str2[i]) {\n      diff += str2[i];\n    }\n  }\n  return diff;\n}\nfunction calculate() {\n  const childNodes = board && board.childNodes;\n  if (!childNodes) {\n    return;\n  }\n  const pieceNodes = Array.from(childNodes).filter(node => {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n      const elementNode = node;\n      return elementNode.classList.contains('piece');\n    }\n    return false;\n  });\n  const _classString = pieceNodes.map(node => `${node.classList[1]}_${node.classList[2]}`).join('_');\n  console.log({\n    classString,\n    _classString\n  });\n  classString = _classString;\n  const chessboard = generateChessboard(pieceNodes);\n  const flatChessboard = chessboard.flat();\n  for (const square of flatChessboard) {\n    console.log({\n      obj: square,\n      square: square.square,\n      defenders: square.defenders.length,\n      attackers: square.attackers.length\n    });\n  }\n  console.log({\n    chessboard\n  });\n}\nsetTimeout(() => {\n  calculate();\n}, 1000);\nfunction testing() {\n  const childNodes = board && board.childNodes;\n  if (!childNodes) {\n    return;\n  }\n  const pieceNodes = Array.from(childNodes).filter(node => {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n      const elementNode = node;\n      return elementNode.classList.contains('piece');\n    }\n    return false;\n  });\n  const _classString = pieceNodes.map(node => `${node.classList[1]}_${node.classList[2]}`).join('_');\n  const diff = findStringDifference(classString, _classString);\n  if (!!diff.trim()) {\n    classString = _classString;\n    calculate();\n  }\n}\nconst observer = new MutationObserver(mutationsList => {\n  mutationsList.forEach(mutation => {\n    if (mutation.type === 'attributes') {\n      if (mutation.attributeName === 'class') {\n        const targetNode = mutation.target;\n        if (targetNode.classList.contains('piece') && !targetNode.classList.contains('dragging')) {\n          testing();\n        }\n      }\n    }\n  });\n});\nif (board && board.childNodes) {\n  board.childNodes.forEach(node => {\n    observer.observe(node, {\n      attributes: true,\n      attributeFilter: ['class']\n    });\n  });\n}","__webpack_require__.h = () => (\"0d8a428ca17f55c2c3e8\")"],"names":[],"sourceRoot":""}