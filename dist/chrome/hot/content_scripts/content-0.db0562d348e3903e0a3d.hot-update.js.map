{"version":3,"file":"hot/content_scripts/content-0.db0562d348e3903e0a3d.hot-update.js","mappingsvJA","sources":["webpack://blunder-watching/./scripts/content.ts","webpack://blunder-watching/webpack/runtime/getFullHash"],"sourcesContent":["if (import.meta.webpackHot) {\n  import.meta.webpackHot.accept();\n}\n;\nconsole.log(\"content script loaded!\");\nimport { generateChessboard } from './utils/generate-chess-board';\nimport { fileLetterToNumberMap } from './constants';\nimport { calculateColor } from './utils/calculate-color';\nimport { findStringDifference } from './utils/find-string-difference';\nconst board = document.querySelector('wc-chess-board');\nlet classString = '';\nfunction calculate(pieceMoved = '') {\n  const childNodes = board && board.childNodes;\n  if (!childNodes) {\n    return;\n  }\n  const pieceNodes = Array.from(childNodes).filter(node => {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n      const elementNode = node;\n      return elementNode.classList.contains('piece');\n    }\n    return false;\n  });\n  const emptyNodes = Array.from(childNodes).filter(node => {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n      const elementNode = node;\n      return elementNode.classList.contains('empty');\n    }\n    return false;\n  });\n  emptyNodes.forEach(childNode => {\n    board.removeChild(childNode);\n  });\n  const _classString = pieceNodes.map(node => `${node.classList[1]}_${node.classList[2]}`).join('_');\n  classString = _classString;\n  const chessboard = generateChessboard(pieceNodes);\n  const flatChessboard = chessboard.flat();\n  console.log({\n    flatChessboard,\n    childNodes,\n    emptyNodes\n  });\n  for (const square of flatChessboard) {\n    const [file, rank] = square && square.square && square?.square?.split('') || [];\n    const selector = `.square-${fileLetterToNumberMap[file]}${rank}`;\n    const squareElements = document.querySelectorAll(selector);\n    if (square.type === 'e') {\n      const color = calculateColor(square.attackers.length, square.defenders.length);\n      const emptySquare = document.createElement('div');\n      emptySquare.style.backgroundSize = '100%';\n      emptySquare.style.cursor = 'pointer'; // Setting multiple cursor styles for cross-browser compatibility\n      emptySquare.style.cursor = 'grab';\n      emptySquare.style.cursor = '-webkit-grab';\n      emptySquare.style.height = '12.5%';\n      emptySquare.style.left = '0';\n      emptySquare.style.overflow = 'hidden';\n      emptySquare.style.position = 'absolute';\n      emptySquare.style.top = '0';\n      emptySquare.style.touchAction = 'none';\n      emptySquare.style.width = '12.5%';\n      emptySquare.style.willChange = 'transform';\n      emptySquare.style.outline = '1px solid black';\n      emptySquare.style.backgroundColor = color;\n      emptySquare.classList.add('empty');\n      emptySquare.classList.add(`square-${fileLetterToNumberMap[file]}${rank}`);\n      const childDiv = document.createElement('div');\n      childDiv.classList.add('attackers-defenders');\n      const childText = document.createElement('p');\n      childText.style.fontSize = '12px';\n      childDiv.style.padding = '2px';\n      childText.innerText = `${square.defenders.length - square.attackers.length}`;\n      childDiv.appendChild(childText);\n      emptySquare.appendChild(childDiv);\n      board.appendChild(emptySquare);\n    }\n    squareElements.forEach(squareElement => {\n      const children = squareElement?.querySelectorAll('.attackers-defenders');\n      children?.forEach(child => {\n        squareElement?.removeChild(child);\n      });\n      if (squareElement) {\n        const color = calculateColor(square.attackers.length, square.defenders.length);\n        if (color) {\n          squareElement.style.backgroundColor = color;\n        } else {\n          squareElement.style.backgroundColor = '';\n        }\n        const childDiv = document.createElement('div');\n        childDiv.classList.add('attackers-defenders');\n        const childText = document.createElement('p');\n        childText.style.fontSize = '12px';\n        childDiv.style.padding = '2px';\n        childText.innerText = `${square.defenders.length - square.attackers.length}`;\n        childDiv.appendChild(childText);\n        squareElement.style.outline = '1px solid black';\n        squareElement.appendChild(childDiv);\n      }\n    });\n  }\n  if (pieceMoved) {\n    const joinedSelector = pieceMoved.split(' ').join('.');\n    const pieceMovedElement = document.querySelector(`.${joinedSelector}`);\n    if (pieceMovedElement) {\n      const children = pieceMovedElement?.querySelectorAll('.attackers-defenders');\n      children?.forEach(child => {\n        pieceMovedElement?.removeChild(child);\n      });\n    }\n  }\n}\nsetTimeout(() => {\n  calculate();\n}, 1000);\nfunction repaint(pieceMoved) {\n  const childNodes = board && board.childNodes;\n  if (!childNodes) {\n    return;\n  }\n  const pieceNodes = Array.from(childNodes).filter(node => {\n    if (node.nodeType === Node.ELEMENT_NODE) {\n      const elementNode = node;\n      return elementNode.classList.contains('piece');\n    }\n    return false;\n  });\n  const _classString = pieceNodes.map(node => `${node.classList[1]}_${node.classList[2]}`).join('_');\n  const diff = findStringDifference(classString, _classString);\n  if (!!diff.trim()) {\n    classString = _classString;\n    calculate(pieceMoved);\n  }\n}\nconst observer = new MutationObserver(mutationsList => {\n  mutationsList.forEach(mutation => {\n    if (mutation.type === 'attributes') {\n      if (mutation.attributeName === 'class') {\n        const targetNode = mutation.target;\n        if (targetNode.classList.contains('piece') && !targetNode.classList.contains('dragging')) {\n          repaint(targetNode.classList.value);\n        }\n      }\n    }\n  });\n});\nif (board && board.childNodes) {\n  board.childNodes.forEach(node => {\n    observer.observe(node, {\n      attributes: true,\n      attributeFilter: ['class']\n    });\n  });\n}","__webpack_require__.h = () => (\"b41dfa03ab673c095dca\")"],"names":[],"sourceRoot":""}